/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        quick_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <16 19>;
        };
    };

    behaviors {
        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };

        one_tilde: one_tilde {
            compatible = "zmk,behavior-tap-dance";
            label = "ONE_TILDE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp NUMBER_1>, <&kp TILDE>;
        };

        caps_lock: caps_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_LOCK";
            #binding-cells = <0>;
            bindings = <&hrm LEFT_SHIFT A>, <&kt CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q       &kp W                &kp E            &kp R      &kp T        &kp Y          &kp U        &kp I             &kp O                 &kp P                       &none
&none  &caps_lock  &hrm LEFT_CONTROL S  &hrm LEFT_WIN D  &kp F      &kp G        &kp H          &kp J        &hrm RIGHT_GUI K  &hrm RIGHT_CONTROL L  &hrm RIGHT_SHIFT SEMICOLON  &none
&none  &kp Z       &kp X                &kp C            &kp V      &kp B        &kp N          &kp M        &kp COMMA         &kp DOT               &kp FSLH                    &none
                                        &mo 2            &lt 1 TAB  &kp SPACE    &kp BACKSPACE  &lt 1 ENTER  &mo 3
            >;
        };

        symb {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &one_tilde  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6            &kp N7                 &kp N8                     &kp N9                          &kp N0                &none
&none  &trans      &trans  &trans  &trans  &trans    &kp LPAR          &kp RIGHT_PARENTHESIS  &hrm RIGHT_WIN LEFT_BRACE  &hrm RIGHT_CONTROL RIGHT_BRACE  &hrm RIGHT_SHIFT SQT  &none
&none  &trans      &trans  &trans  &trans  &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET      &kp LESS_THAN              &kp GREATER_THAN                &kp NON_US_BACKSLASH  &none
                           &trans  &trans  &trans    &trans            &trans                 &trans
            >;
        };

        tool {
            bindings = <
&none  &out OUT_TOG  &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &none
&none  &bt BT_CLR    &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &none
                                   &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
